//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation,
// vhudson-jaxb-3268
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2008.01.16 at 12:27:53 PM CET
//

package fr.cls.atoll.motu.library.tds.server;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;

/**
 * <p>
 * Java class for AggregationType.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * <p>
 * 
 * <pre>
 *  &lt;simpleType name=&quot;AggregationType&quot;&gt;
 *    &lt;restriction base=&quot;{http://www.w3.org/2001/XMLSchema}string&quot;&gt;
 *      &lt;enumeration value=&quot;forecastModelRunCollection&quot;/&gt;
 *      &lt;enumeration value=&quot;forecastModelRunSingleCollection&quot;/&gt;
 *      &lt;enumeration value=&quot;forecastModelRun&quot;/&gt;
 *      &lt;enumeration value=&quot;joinExisting&quot;/&gt;
 *      &lt;enumeration value=&quot;joinNew&quot;/&gt;
 *      &lt;enumeration value=&quot;union&quot;/&gt;
 *    &lt;/restriction&gt;
 *  &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlEnum
public enum AggregationType {

    @XmlEnumValue("forecastModelRun")
    FORECAST_MODEL_RUN("forecastModelRun"), @XmlEnumValue("forecastModelRunCollection")
    FORECAST_MODEL_RUN_COLLECTION("forecastModelRunCollection"), @XmlEnumValue("forecastModelRunSingleCollection")
    FORECAST_MODEL_RUN_SINGLE_COLLECTION("forecastModelRunSingleCollection"), @XmlEnumValue("joinExisting")
    JOIN_EXISTING("joinExisting"), @XmlEnumValue("joinNew")
    JOIN_NEW("joinNew"), @XmlEnumValue("union")
    UNION("union");
    private final String value;

    AggregationType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static AggregationType fromValue(String v) {
        for (AggregationType c : AggregationType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v.toString());
    }

}
