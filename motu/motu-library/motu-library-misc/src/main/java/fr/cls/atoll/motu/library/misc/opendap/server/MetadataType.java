//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-3268 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2009.03.25 at 11:43:43 AM CET 
//


package fr.cls.atoll.motu.library.misc.opendap.server;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;


/**
 * <p>Java class for MetadataType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="MetadataType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}token">
 *     &lt;enumeration value="THREDDS"/>
 *     &lt;enumeration value="ADN"/>
 *     &lt;enumeration value="Aggregation"/>
 *     &lt;enumeration value="CatalogGenConfig"/>
 *     &lt;enumeration value="DublinCore"/>
 *     &lt;enumeration value="DIF"/>
 *     &lt;enumeration value="FGDC"/>
 *     &lt;enumeration value="LAS"/>
 *     &lt;enumeration value="NetCDF"/>
 *     &lt;enumeration value="ESG"/>
 *     &lt;enumeration value="Other"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlEnum
public enum MetadataType {

    ADN("ADN"),
    @XmlEnumValue("Aggregation")
    AGGREGATION("Aggregation"),
    @XmlEnumValue("CatalogGenConfig")
    CATALOG_GEN_CONFIG("CatalogGenConfig"),
    DIF("DIF"),
    @XmlEnumValue("DublinCore")
    DUBLIN_CORE("DublinCore"),
    ESG("ESG"),
    FGDC("FGDC"),
    LAS("LAS"),
    @XmlEnumValue("NetCDF")
    NET_CDF("NetCDF"),
    @XmlEnumValue("Other")
    OTHER("Other"),
    THREDDS("THREDDS");
    private final String value;

    MetadataType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static MetadataType fromValue(String v) {
        for (MetadataType c: MetadataType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v.toString());
    }

}
