<project name="atoll-is-deployment" basedir="." default="deploy">
	<!-- Requirements to use this Ant script 
		===========
		Ant 1.8.2: 
		===========
		download at http://ant.apache.org/bindownload.cgi
		
		===========
		JSch: 
		===========
		download at http://sourceforge.net/projects/jsch/
		then copy jar file to the lib directory of your Ant installation
		
		===========			
		ant-contrib:
		===========
		Download at http://sourceforge.net/projects/ant-contrib/files/
		To install ant-contrib copy ant-contrib-0.3.jar to the lib directory of your Ant installation
		Web site: http://ant-contrib.sourceforge.net/
	-->
	
	<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
	
	<property name="maven.local.repo" value="${user.home}/.m2/repository"/>
	<property name="maven.local.repo.atoll" value="${maven.local.repo}/cls/atoll"/>
	<property name="maven.local.repo.motu" value="${maven.local.repo.atoll}/motu"/>
	<property name="maven.local.repo.motu.config" value="${maven.local.repo.motu}/configuration"/>
	
	<property name="war.ext" value="war"/>
	<property name="jar.ext" value="jar"/>
	<property name="zip.ext" value="tar.gz"/>
	<property name="deploy.name" value="motu"/>
	<property name="start.motu.default" value="start-motu"/>
	<property name="stop.motu.default" value="stop-motu"/>
	<property name="deploy.version.default" value="2.1.15-SNAPSHOT"/>
	<property name="deploy.root.default" value="/opt/atoll"/>
	<property name="host.default" value="misgw-qt.cls.fr"/>
	<property name="username.default" value=""/>
	<property name="password.default" value=""/>
	<property name="tomcat.dir.default" value="tomcat-motu"/>
	<property name="contexts.dir" value="${deploy.root}/${tomcat.dir}/lib/fr/cls/atoll/contexts"/>
	<property name="motu.prefix" value="motu-web"/>
	<property name="config.prefix" value="motu-configuration"/>
	<property name="config.prefix.common" value="${config.prefix}-common"/>
	<property name="contexts.prefix" value="atoll-contexts"/>
	<property name="tomcat.resources.prefix" value="motu-library-tomcat-resources"/>
	<property name="motu.servlet.name.default" value="mis-gateway-servlet"/>
	
	<tstamp>
		<format property="now" pattern="yyyy-MM-dd-HH-mm-ss.S"  />
	</tstamp>
	
	
<!--	<echo message="${now}" />
-->	
	
	<!-- //////////////////////////////////////////////////////////////// -->
	<!-- Deploy (main target)  -->
	<!-- //////////////////////////////////////////////////////////////// -->
	<target name="deploy"
		depends="init, stop-motu-web, create-link-motu-config, create-link-motu-web, start-motu-web"
	/> 
	
	
	<!-- ============================ -->
	<!-- Ask options/parameters                         -->
	<!-- ============================ -->
	<target name="prompt">		
		<input message="Host ? " defaultvalue="${host.default}" addproperty="host"/>
		<propertyregex property="hostprefix" input="${host}" regexp="([^\.]*)\.*" select="\1"
			casesensitive="false"/>
		<!--		<echo>${hostprefix}</echo>-->
		<input message="Username ? " defaultvalue="${username.default}" addproperty="username"/>
		<input message="Password ? " defaultvalue="${password.default}" addproperty="password"/>
		<input message="Version to deploy ? " defaultvalue="${deploy.version.default}"
			addproperty="deploy.version"/>
		<input message="Root directory ? " defaultvalue="${deploy.root.default}"
			addproperty="deploy.root"/>
		<input message="Tomcat directory ? " defaultvalue="${tomcat.dir.default}"
			addproperty="tomcat.dir"/>
		
		<input message="Motu Web package  name (without version) ? "
			defaultvalue="${motu.prefix}"
			addproperty="motu.web.package.name"/>

		<!-- Ask the user  Motu Common configuration deployment -->
		<input message="Deploy Motu Common Configuration [yes, no]? " defaultvalue="no"
			addproperty="common.config.deploy"/>
		
		<if>
			<equals arg1="${common.config.deploy}" arg2="yes" casesensitive="true"/>
			<then>
				<input message="Motu Common configuration package  name  (without version)  ? "
					defaultvalue="${config.prefix.common}"
					addproperty="common.config.package.name"/>
				
			</then>
			
		</if>
		
		<!-- Ask the user  Motu Custom  configuration deployment -->
		<input message="Deploy Motu  Configuration [yes, no]? " defaultvalue="no"
			addproperty="config.deploy"/>
		
		<if>
			<equals arg1="${config.deploy}" arg2="yes" casesensitive="true"/>
			<then>
				<input message="Motu Custom Configuration package  name  (without version)  ? "
					defaultvalue="${config.prefix}-${hostprefix}"
					addproperty="config.package.name"/>
				
				<input message="Motu Custom Configuration package  version  ? "
					defaultvalue="${deploy.version}"
					addproperty="config.deploy.version"/>
			</then>
				
		</if>				
		

		<input message="Motu Web servlet name  ? "
			defaultvalue="${motu.servlet.name.default}"
			addproperty="motu.servlet.name"/>
		
		
<!--		<propertyregex property="config.suffix" input="${config.package.name}"
			regexp="${config.prefix}-([^\.]*)-${deploy.version}" select="\1" casesensitive="false"/>
		<property name="config.prefix.custom.pathname" value="${config.prefix}-${config.suffix}"/>
-->		
		
		<input message="Start Motu Web script ? " defaultvalue="${deploy.root}/${start.motu.default}"
			addproperty="start.motu"/>
		<input message="Stop Motu Web script ? " defaultvalue="${deploy.root}/${stop.motu.default}"
			addproperty="stop.motu"/>
		
		
		
		
	</target>
			
	<!-- ============================ -->
	<!-- Initialisation  -->
	<!-- ============================ -->
	<target name="init" depends="prompt"> 
		
		<!-- Set remote directory name  -->
		<property name="motu.remote.dir" value="${motu.web.package.name}-${deploy.version}"/>
		<property name="config.remote.dir" value="${config.package.name}-${config.deploy.version}"/>
		<property name="common.config.remote.dir" value="${common.config.package.name}-${deploy.version}"/>
		
		
		<!-- Ask the user to confirm deployment -->
		<input message="Are you sure to deploy atoll-is [yes, no]? " defaultvalue="no"
			addproperty="accept.deploy"/>
		
		<!-- check motu common configuration jar is in the maven local repository -->		
		<property name="common.config.package.jar" value="${common.config.package.name}-${deploy.version}-delivery.${zip.ext}"/>
		<property name="common.config.package.jar.local"
			value="${maven.local.repo.motu.config}/${config.prefix.common}/${deploy.version}/${common.config.package.jar}"
		/>
		
		<fail message="Deployment cancelled by user.">
			<condition>
				<not>
					<equals arg1="${accept.deploy}" arg2="yes" casesensitive="true"/>
				</not>
			</condition>
		</fail>
		
		<fail message="File ${common.config.package.jar.local} is mssing.">
			<condition>
				<not>
					<available file="${common.config.package.jar.local}"
						property="common.config.package.jar.present"/>
				</not>
			</condition>
		</fail>
		
		<!-- check motu custom configuration jar is in the maven local repository -->		
		<property name="config.package.jar" value="${config.package.name}-${config.deploy.version}-delivery.${zip.ext}"/>
		<property name="config.package.jar.local"
			value="${maven.local.repo.motu.config}/${config.package.name]/${deploy.version}/${config.package.jar}"
		/>

		
		<fail message="File ${config.package.jar.local} is mssing.">
			<condition>
				<not>
					<available file="${config.package.jar.local}"
						property="config.package.jar.present"/>
				</not>
			</condition>
		</fail>
		
		
		<!-- check motu web  is in the maven local repository -->
		
		<property name="motu.web.package.jar" value="${motu.web.package.name}-${deploy.version}.${war.ext}"/>
		<property name="motu.web.package.jar.local"
			value="${maven.local.repo.motu}/motu-web/${deploy.version}/${motu.web.package.jar}"
		/>
		
		<fail message="File ${motu.web.package.jar.local} is mssing.">
			<condition>
				<not>
				<available file="${motu.web.package.jar.local}."
				property="motu.web.package.jar.present"/>
				</not>					
			</condition>
		</fail>			
		
		
	</target>
	
	<!-- ============================ -->
	<!-- Stop  motu web -->
	<!-- ============================ -->	
	<target name="stop-motu-web">
		<sshexec host="${host}" username="${username}" password="${password}" trust="true"
			command="${stop.motu}"/>

		<sleep seconds="10"/>

	</target>
	<!-- ============================ -->
	<!-- Start motu web -->
	<!-- ============================ -->	
	<target name="start-motu-web"> 
		<sshexec host="${host}" username="${username}" password="${password}" trust="true"
			command="${start.motu}"/>
			
	</target>
	<!-- ============================ -->
	<!-- Checks if motu-web directory exists -->
	<!-- ============================ -->	
	<target name="check-dir-motu-web">	
		<sshexec host="${host}" username="${username}" password="${password}" trust="true"
			failonerror="false" outputproperty="rc-motu"
			command="find  ${deploy.root} -name ${motu.remote.dir}  | wc -l"/>
		<echo message="sshexec_rc = ${rc-motu}"/>
		<propertyregex property="check-motu-web" input="${rc-motu}" regexp="([\d]*)\.*" select="\1"
			casesensitive="false"/>
		
		<echo message="check-motu-web = ${check-motu-web}"/>
		<condition property="move-motu-web" value="true">
			<equals arg1="${check-motu-web}" arg2="1" forcestring="true"/>
		</condition>
				
		<echo message="move-motu-web = ${move-motu-web}"/>
	</target>
	
	<!-- ============================ -->
	<!-- Move motu web directory to a temp directory if exists -->
	<!-- ============================ -->
	<target name="move-dir-motu-web"  depends="check-dir-motu-web" if="move-motu-web">
		<sshexec host="${host}" username="${username}" password="${password}" trust="true"
			failonerror="true" 
			command="mv  ${deploy.root}/${motu.remote.dir} ${deploy.root}/${motu.remote.dir}.${now}"/>		
	</target>
	
	<!-- ============================ -->
	<!-- Checks if  motu config directory exists -->
	<!-- ============================ -->	
	<target name="check-dir-motu-config">	
		<sshexec host="${host}" username="${username}" password="${password}" trust="true"
			failonerror="false" outputproperty="rc-config"
			command="find  ${deploy.root} -name ${config.remote.dir}  | wc -l"/>
		<echo message="sshexec_rc = ${rc-config}"/>
		<propertyregex property="check-motu-config" input="${rc-config}" regexp="([\d]*)\.*" select="\1"
			casesensitive="false"/>
		
		<echo message="check-motu-config = ${check-motu-config}"/>
		<condition property="move-motu-config" value="true">
			<equals arg1="${check-motu-config}" arg2="1" forcestring="true"/>
		</condition>
		
		<echo message="move-motu-config = ${move-motu-config}"/>
	</target>	
	
	<!-- ============================ -->
	<!-- Move motu config directory to a temp directory if exists -->
	<!-- ============================ -->
	<target name="move-dir-motu-config"  depends="check-dir-motu-config" if="move-motu-config">
		<sshexec host="${host}" username="${username}" password="${password}" trust="true"
			failonerror="true" 
			command="mv  ${deploy.root}/${config.remote.dir} ${deploy.root}/${config.remote.dir}.${now}"/>
		
	</target>
	
	<!-- ============================ -->
	<!-- Checks if  motu common config directory exists -->
	<!-- ============================ -->	
	<target name="check-dir-motu-common-config">	
		<sshexec host="${host}" username="${username}" password="${password}" trust="true"
			failonerror="false" outputproperty="rc-config"
			command="find  ${deploy.root} -name ${common.config.remote.dir}  | wc -l"/>
		<echo message="sshexec_rc = ${rc-common-config}"/>
		<propertyregex property="check-motu-common-config" input="${rc-common-config}" regexp="([\d]*)\.*" select="\1"
			casesensitive="false"/>
		
		<echo message="check-motu-common-config = ${check-motu-common-config}"/>
		<condition property="move-motu-common-config" value="true">
			<equals arg1="${check-motu-common-config}" arg2="1" forcestring="true"/>
		</condition>
		
		<echo message="move-motu-common-config = ${move-motu-common-config}"/>
	</target>	
	
	<!-- ============================ -->
	<!-- Move motu common config directory to a temp directory if exists -->
	<!-- ============================ -->
	<target name="move-dir-motu-common-config"  depends="check-dir-motu-common-config" if="move-motu-common-config">
		<sshexec host="${host}" username="${username}" password="${password}" trust="true"
			failonerror="true" 
			command="mv  ${deploy.root}/${common.config.remote.dir} ${deploy.root}/${common.config.remote.dir}.${now}"/>
		
	</target>
	
	<!-- ============================ -->
	<!-- Process motu configuration package on the remote host -->
	<!--  Copy tar.gz file, untar, remove tar.gz file -->
	<!-- ============================ -->
	<target name="process-package-motu-config" depends="move-dir-motu-config">
		<scp localFile="${config.package.jar.local}"
			remoteTodir="${username}@${host}:${deploy.root}" password="${password}" trust="true"/>	
		
		<sshexec host="${host}" username="${username}" password="${password}" trust="true"
			failonerror="true" 
			command="cd ${deploy.root}; tar -zxf  ${deploy.root}/${config.package.jar};rm -f ${deploy.root}/${config.package.jar}"/>
	</target>
	
	<!-- ============================ -->
	<!-- Process motu common configuration package on the remote host -->
	<!--  Copy tar.gz file, untar, remove tar.gz file -->
	<!-- ============================ -->
	<target name="process-package-motu-common-config" depends="move-dir-motu-common-config">
		<scp localFile="${common.config.package.jar.local}"
			remoteTodir="${username}@${host}:${deploy.root}" password="${password}" trust="true"/>	
		
		<sshexec host="${host}" username="${username}" password="${password}" trust="true"
			failonerror="true" 
			command="cd ${deploy.root}; tar -zxf  ${deploy.root}/${common.config.package.jar};rm -f ${deploy.root}/${common.config.package.jar}"/>
	</target>
	
	
	<!-- ============================ -->
	<!-- Process atoll-is package on the remote host -->
	<!--  Copy war file, create directory, unjar, remove war file -->
	<!-- ============================ -->
	<target name="process-package-motu-web" depends="move-dir-motu-web">
		<scp localFile="${motu.web.package.jar.local}"
			remoteTodir="${username}@${host}:${deploy.root}" password="${password}" trust="true"/>	
		
		<sshexec host="${host}" username="${username}" password="${password}" trust="true"
			failonerror="true" 
			command="cd ${deploy.root}; mkdir ${motu.remote.dir}; cd ${motu.remote.dir}; jar -xf ${deploy.root}/${motu.web.package.jar}; rm -f ${deploy.root}/${motu.web.package.jar}"/>
		
	</target>
	
	<!-- ============================ -->
	<!-- Create link to atoll motu web -->
	<!-- ============================ -->
	<target name="create-link-motu-web" depends="process-package-motu-web">
		<property name="tomcat-motu-webapps" value="${deploy.root}/${tomcat.dir}/webapps" />
		<!-- Remove link to atoll-is in tomcat webapps directory. 
		Use an specific sshexec task with  failonerror="false" if link doesn't exist -->
		<sshexec host="${host}" username="${username}" password="${password}" trust="true"
			failonerror="false" command="rm ${tomcat-motu-webapps}/${motu.servlet.name}"/>

		<!-- Create link to atoll-is in tomcat webapps directory -->
		<sshexec host="${host}" username="${username}" password="${password}" trust="true"
			failonerror="true" command="cd ${tomcat-motu-webapps}; ln -s ${deploy.root}/${motu.remote.dir} ${motu.servlet.name}"/>

	</target>
	<!-- ============================ -->
	<!-- Create link to motu configuration -->
	<!-- ============================ -->
	<target name="create-link-motu-config" depends="process-package-motu-config">
		<!-- Remove link to motu configuration in tomcat lib directory. 
			Use an specific sshexec task with  failonerror="false" if link doesn't exist -->
		<sshexec host="${host}" username="${username}" password="${password}" trust="true"
			failonerror="false" command="rm ${deploy.root}/${config.package.name}"/>
		
		<!-- Create link to to motu configuration in the deploy root  directory -->
		<sshexec host="${host}" username="${username}" password="${password}" trust="true"
			failonerror="true" command="cd ${deploy.root}; ln -s ${deploy.root}/${config.remote.dir} ${config.package.name}"/>
		
	</target>
	<!-- ============================ -->
	<!-- Create link to motu common configuration -->
	<!-- ============================ -->
	<target name="create-link-motu-commom-config" depends="process-package-motu-common-config">
		<!-- Remove link to motu common configuration in the deploy root directory. 
			Use an specific sshexec task with  failonerror="false" if link doesn't exist -->
		<sshexec host="${host}" username="${username}" password="${password}" trust="true"
			failonerror="false" command="rm ${deploy.root}/${common.config.package.name}"/>
		
		<!-- Create link to to motu common configuration in the deploy root  directory -->
		<sshexec host="${host}" username="${username}" password="${password}" trust="true"
			failonerror="true" command="cd ${deploy.root}; ln -s ${deploy.root}/${common.config.remote.dir} ${common.config.package.name}"/>
		
	</target>
	
	
</project>